package components

import (
	"fmt"
	"github.com/esizer/grddrw/data"
)

css paint(px *data.Pixel) {
	background-color: { templ.SafeCSSProperty(fmt.Sprintf("rgb(%d,%d,%d)", px.R, px.G, px.B)) };
}

css paintHex(hex string) {
	background-color: { templ.SafeCSSProperty( hex ) };
}

templ Grid(g data.Grid) {
	<div id={ fmt.Sprintf("grid-%d", g.Id) } class="grid grid-cols-16 auto-rows-fr border-collapse bg-slate-600 border border-slate-600 shadow w-full">
		for _, p := range g.Pixels {
			@Swatch(p)
		}
	</div>
}

templ Actions(id int, p *data.Palette) {
	<div class="flex items-center justify-end gap-4">
		@Picker()
		@ColorPalette(p)
		@Button(ButtonProps{
			variant: Secondary,
			attrs: templ.Attributes{
				"hx-put":     "/clear",
				"hx-swap":    "outerHTML",
				"hx-target":  fmt.Sprintf("#grid-%d", id),
				"aria-label": "Clear",
			}}) {
			<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
				<path stroke-linecap="round" stroke-linejoin="round" d="M12 9.75 14.25 12m0 0 2.25 2.25M14.25 12l2.25-2.25M14.25 12 12 14.25m-2.58 4.92-6.374-6.375a1.125 1.125 0 0 1 0-1.59L9.42 4.83c.21-.211.497-.33.795-.33H19.5a2.25 2.25 0 0 1 2.25 2.25v10.5a2.25 2.25 0 0 1-2.25 2.25h-9.284c-.298 0-.585-.119-.795-.33Z"></path>
			</svg>
		}
	</div>
}

templ Picker() {
	<div>
		<label for="colorPicker" class="sr-only">Color</label>
		<input
			id="colorPicker"
			name="color"
			type="color"
			class={ "appearance-none w-24 h-[2.75rem] p-px bg-white border-2 border-slate-900 shadow cursor-pointer", focus() }
		/>
	</div>
}

templ Swatch(p *data.Pixel) {
	<button
		class={
			"relative aspect-square border border-slate-900 outline-none",
			"after:content-[''] after:absolute after:inset-0 after:z-10:",
			"focus-visible:after:ring-4 focus-visible:after:ring-inset focus-visible:after:ring-fuchsia-500",
		}
		hx-trigger="click, mouseover[ctrlKey] once, keydown[space]"
		hx-put="/pixel"
		hx-swap="innerHTML"
		hx-include="[name='color']"
	>
		@Pixel(p)
	</button>
}

templ Pixel(p *data.Pixel) {
	<span class={ "inset-0 absolute", paint(p) }></span>
}

templ ColorPalette(p *data.Palette) {
	<script type="text/javascript">
		document.addEventListener('alpine:init', () => {
			Alpine.data('palette', () => ({
				open: false,
				toggle() {
					if(this.open) {
						return	this.close()
					}

					this.$refs.button.focus()
					this.open = true;
				},
				close(focusAfter) {
					if(!this.open) return
					this.open = false;
					focusAfter && focusAfter.focus()
				},
				pick(hex) {
					const picker = document.getElementById("colorPicker");
					if(picker) {
						picker.value = hex;
					}
				}
			}));
		});
	</script>
	@Button(ButtonProps{
		attrs: templ.Attributes{
			"hx-post":    "/add-color",
			"hx-target":  "#color-palette",
			"hx-include": "[name='color']",
			"hx-swap":    "innerHTML",
			"aria-label": "Add color to palette",
		},
	}) {
		<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
			<path stroke-linecap="round" stroke-linejoin="round" d="M12 9v6m3-3H9m12 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path>
		</svg>
	}
	<div
		x-data="palette"
		x-on:keydown.escape.prevent.stop="close($refs.button)"
		x-on:focusin.window="! $refs.panel.contains($event.target) && close()"
		class="relative"
	>
		@Button(ButtonProps{
			attrs: templ.Attributes{
				"x-ref":          "button",
				"@click":         "toggle()",
				":aria-expanded": "open",
				"aria-controls":  "color-palette",
				"aria-label":     "Color palette",
				"type":           "button",
			},
		}) {
			<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
				<path stroke-linecap="round" stroke-linejoin="round" d="M4.098 19.902a3.75 3.75 0 0 0 5.304 0l6.401-6.402M6.75 21A3.75 3.75 0 0 1 3 17.25V4.125C3 3.504 3.504 3 4.125 3h5.25c.621 0 1.125.504 1.125 1.125v4.072M6.75 21a3.75 3.75 0 0 0 3.75-3.75V8.197M6.75 21h13.125c.621 0 1.125-.504 1.125-1.125v-5.25c0-.621-.504-1.125-1.125-1.125h-4.072M10.5 8.197l2.88-2.88c.438-.439 1.15-.439 1.59 0l3.712 3.713c.44.44.44 1.152 0 1.59l-2.879 2.88M6.75 17.25h.008v.008H6.75v-.008Z"></path>
			</svg>
		}
		<div
			id="color-palette"
			class="bg-white shadow border-2 border-slate-900 p-2 mt-2 z-50 max-w-full w-full min-w-max"
			style="display: none;"
			x-ref="panel"
			x-show="open"
			x-transition.origin.top.right
			x-anchor.bottom-end="$refs.button"
			x-on:click.outside="close($refs.button)"
		>
			@PaletteSwatches(p)
		</div>
	</div>
}

templ PaletteSwatches(p *data.Palette) {
	if len(*p) > 0 {
		<div class="grid grid-cols-4 gap-2">
			for _, h := range *p {
				<button class={ "relative w-8 h-8 block", focus() } @click={ fmt.Sprintf("pick('%s')", h) }>
					<span class={ "absolute", "inset-px", paintHex(h) }></span>
				</button>
			}
		</div>
	} else {
		<p class="text-xs text-slate-800 italic">No colours added to palette.</p>
	}
}
